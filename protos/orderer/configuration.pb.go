// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer/configuration.proto

package orderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConsensusType struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *ConsensusType) Reset()                    { *m = ConsensusType{} }
func (m *ConsensusType) String() string            { return proto.CompactTextString(m) }
func (*ConsensusType) ProtoMessage()               {}
func (*ConsensusType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ConsensusType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type BatchSize struct {
	// Simply specified as number of messages for now, in the future
	// we may want to allow this to be specified by size in bytes
	MaxMessageCount uint32 `protobuf:"varint,1,opt,name=max_message_count,json=maxMessageCount" json:"max_message_count,omitempty"`
	// The byte count of the serialized messages in a batch cannot
	// exceed this value.
	AbsoluteMaxBytes uint32 `protobuf:"varint,2,opt,name=absolute_max_bytes,json=absoluteMaxBytes" json:"absolute_max_bytes,omitempty"`
	// The byte count of the serialized messages in a batch should not
	// exceed this value.
	PreferredMaxBytes uint32 `protobuf:"varint,3,opt,name=preferred_max_bytes,json=preferredMaxBytes" json:"preferred_max_bytes,omitempty"`
}

func (m *BatchSize) Reset()                    { *m = BatchSize{} }
func (m *BatchSize) String() string            { return proto.CompactTextString(m) }
func (*BatchSize) ProtoMessage()               {}
func (*BatchSize) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *BatchSize) GetMaxMessageCount() uint32 {
	if m != nil {
		return m.MaxMessageCount
	}
	return 0
}

func (m *BatchSize) GetAbsoluteMaxBytes() uint32 {
	if m != nil {
		return m.AbsoluteMaxBytes
	}
	return 0
}

func (m *BatchSize) GetPreferredMaxBytes() uint32 {
	if m != nil {
		return m.PreferredMaxBytes
	}
	return 0
}

type BatchTimeout struct {
	// Any duration string parseable by ParseDuration():
	// https://golang.org/pkg/time/#ParseDuration
	Timeout string `protobuf:"bytes,1,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *BatchTimeout) Reset()                    { *m = BatchTimeout{} }
func (m *BatchTimeout) String() string            { return proto.CompactTextString(m) }
func (*BatchTimeout) ProtoMessage()               {}
func (*BatchTimeout) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *BatchTimeout) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

// Carries a list of bootstrap brokers, i.e. this is not the exclusive set of
// brokers an ordering service
type KafkaBrokers struct {
	// Each broker here should be identified using the (IP|host):port notation,
	// e.g. 127.0.0.1:7050, or localhost:7050 are valid entries
	Brokers []string `protobuf:"bytes,1,rep,name=brokers" json:"brokers,omitempty"`
}

func (m *KafkaBrokers) Reset()                    { *m = KafkaBrokers{} }
func (m *KafkaBrokers) String() string            { return proto.CompactTextString(m) }
func (*KafkaBrokers) ProtoMessage()               {}
func (*KafkaBrokers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *KafkaBrokers) GetBrokers() []string {
	if m != nil {
		return m.Brokers
	}
	return nil
}

// ChannelRestrictions is the mssage which conveys restrictions on channel creation for an orderer
type ChannelRestrictions struct {
	MaxCount uint64 `protobuf:"varint,1,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
}

func (m *ChannelRestrictions) Reset()                    { *m = ChannelRestrictions{} }
func (m *ChannelRestrictions) String() string            { return proto.CompactTextString(m) }
func (*ChannelRestrictions) ProtoMessage()               {}
func (*ChannelRestrictions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ChannelRestrictions) GetMaxCount() uint64 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func init() {
	proto.RegisterType((*ConsensusType)(nil), "orderer.ConsensusType")
	proto.RegisterType((*BatchSize)(nil), "orderer.BatchSize")
	proto.RegisterType((*BatchTimeout)(nil), "orderer.BatchTimeout")
	proto.RegisterType((*KafkaBrokers)(nil), "orderer.KafkaBrokers")
	proto.RegisterType((*ChannelRestrictions)(nil), "orderer.ChannelRestrictions")
}

func init() { proto.RegisterFile("orderer/configuration.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xc9, 0xbf, 0xe5, 0x5f, 0xbb, 0x58, 0xb4, 0xdb, 0x4b, 0xa0, 0x97, 0x12, 0x2f, 0x45,
	0x34, 0x01, 0xf5, 0x13, 0xa4, 0x47, 0xe9, 0x25, 0xf6, 0xe4, 0xa5, 0x4c, 0xd2, 0x49, 0xb2, 0xa4,
	0xd9, 0x09, 0xbb, 0x1b, 0x48, 0xfd, 0x1e, 0x7e, 0x5f, 0xd9, 0x4d, 0xa2, 0x82, 0xb7, 0x99, 0x79,
	0xbf, 0x07, 0x6f, 0x1e, 0x5b, 0x93, 0x3a, 0xa1, 0x42, 0x15, 0x65, 0x24, 0x73, 0x51, 0xb4, 0x0a,
	0x8c, 0x20, 0x19, 0x36, 0x8a, 0x0c, 0xf1, 0xd9, 0x20, 0x06, 0x77, 0x6c, 0xb1, 0x23, 0xa9, 0x51,
	0xea, 0x56, 0x1f, 0x2e, 0x0d, 0x72, 0xce, 0xa6, 0xe6, 0xd2, 0xa0, 0xef, 0x6d, 0xbc, 0xed, 0x3c,
	0x71, 0x73, 0xf0, 0xe9, 0xb1, 0x79, 0x0c, 0x26, 0x2b, 0xdf, 0xc4, 0x07, 0xf2, 0x7b, 0xb6, 0xac,
	0xa1, 0x3b, 0xd6, 0xa8, 0x35, 0x14, 0x78, 0xcc, 0xa8, 0x95, 0xc6, 0xe1, 0x8b, 0xe4, 0xa6, 0x86,
	0x6e, 0xdf, 0xdf, 0x77, 0xf6, 0xcc, 0x1f, 0x18, 0x87, 0x54, 0xd3, 0xb9, 0x35, 0x78, 0xb4, 0xa6,
	0xf4, 0x62, 0x50, 0xfb, 0xff, 0x1c, 0x7c, 0x3b, 0x2a, 0x7b, 0xe8, 0x62, 0x7b, 0xe7, 0x21, 0x5b,
	0x35, 0x0a, 0x73, 0x54, 0x0a, 0x4f, 0xbf, 0xf0, 0x89, 0xc3, 0x97, 0xdf, 0xd2, 0xc8, 0x07, 0x5b,
	0x76, 0xed, 0x62, 0x1d, 0x44, 0x8d, 0xd4, 0x1a, 0xee, 0xb3, 0x99, 0xe9, 0xc7, 0x21, 0xfe, 0xb8,
	0x5a, 0xf2, 0x15, 0xf2, 0x0a, 0x62, 0x45, 0x15, 0x2a, 0x6d, 0xc9, 0xb4, 0x1f, 0x7d, 0x6f, 0x33,
	0xb1, 0xe4, 0xb0, 0x06, 0x4f, 0x6c, 0xb5, 0x2b, 0x41, 0x4a, 0x3c, 0x27, 0xa8, 0x8d, 0x12, 0x99,
	0x6d, 0x4d, 0xf3, 0x35, 0x9b, 0xdb, 0x40, 0x3f, 0xcf, 0x4e, 0x93, 0xab, 0x1a, 0x3a, 0xf7, 0x65,
	0x8c, 0xec, 0x91, 0x54, 0x11, 0x0a, 0x59, 0x9d, 0x21, 0xd5, 0x39, 0xb5, 0xf2, 0xd4, 0x97, 0x2d,
	0x64, 0x95, 0x95, 0x20, 0x86, 0xd6, 0x75, 0x38, 0xb4, 0xfe, 0xfe, 0x52, 0x08, 0x53, 0xb6, 0x69,
	0x98, 0x51, 0x1d, 0xfd, 0x71, 0x45, 0xa3, 0x2b, 0xea, 0x5d, 0xd1, 0xe0, 0x4a, 0xff, 0xbb, 0xfd,
	0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x50, 0x9d, 0x8e, 0xda, 0x01, 0x00, 0x00,
}
