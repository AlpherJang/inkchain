// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/configuration.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AnchorPeers simply represents list of anchor peers which is used in ConfigurationItem
type AnchorPeers struct {
	AnchorPeers []*AnchorPeer `protobuf:"bytes,1,rep,name=anchor_peers,json=anchorPeers" json:"anchor_peers,omitempty"`
}

func (m *AnchorPeers) Reset()                    { *m = AnchorPeers{} }
func (m *AnchorPeers) String() string            { return proto.CompactTextString(m) }
func (*AnchorPeers) ProtoMessage()               {}
func (*AnchorPeers) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AnchorPeers) GetAnchorPeers() []*AnchorPeer {
	if m != nil {
		return m.AnchorPeers
	}
	return nil
}

// AnchorPeer message structure which provides information about anchor peer, it includes host name,
// port number and peer certificate.
type AnchorPeer struct {
	// DNS host name of the anchor peer
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// The port number
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *AnchorPeer) Reset()                    { *m = AnchorPeer{} }
func (m *AnchorPeer) String() string            { return proto.CompactTextString(m) }
func (*AnchorPeer) ProtoMessage()               {}
func (*AnchorPeer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *AnchorPeer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AnchorPeer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*AnchorPeers)(nil), "protos.AnchorPeers")
	proto.RegisterType((*AnchorPeer)(nil), "protos.AnchorPeer")
}

func init() { proto.RegisterFile("peer/configuration.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x3d, 0xef, 0xc2, 0x20,
	0x10, 0x87, 0xc3, 0xff, 0xc5, 0x44, 0xea, 0xc4, 0xc4, 0x58, 0x3b, 0x75, 0x82, 0xf8, 0xf6, 0x01,
	0x34, 0x7e, 0x00, 0xd3, 0xc1, 0xc1, 0xc5, 0x50, 0xa4, 0x85, 0x54, 0xb9, 0x06, 0xe8, 0xf7, 0x37,
	0x50, 0x0d, 0x13, 0x0f, 0x77, 0xf7, 0xe4, 0xee, 0x87, 0xe9, 0xa8, 0x94, 0xe3, 0x12, 0x6c, 0x67,
	0xfa, 0xc9, 0x89, 0x60, 0xc0, 0xb2, 0xd1, 0x41, 0x00, 0xb2, 0x48, 0x8f, 0xaf, 0xce, 0xb8, 0x38,
	0x5a, 0xa9, 0xc1, 0x5d, 0x94, 0x72, 0x9e, 0x1c, 0xf0, 0x4a, 0xa4, 0xef, 0x3d, 0x9a, 0x9e, 0xa2,
	0xf2, 0xb7, 0x2e, 0xb6, 0x64, 0x96, 0x3c, 0xcb, 0xa3, 0x4d, 0x21, 0xb2, 0x56, 0xed, 0x31, 0xce,
	0x2d, 0x42, 0xf0, 0x9f, 0x06, 0x1f, 0x28, 0x2a, 0x51, 0xbd, 0x6c, 0x12, 0xc7, 0xda, 0x08, 0x2e,
	0xd0, 0x9f, 0x12, 0xd5, 0xff, 0x4d, 0xe2, 0xd3, 0x15, 0xaf, 0xc1, 0xf5, 0xcc, 0xd8, 0x41, 0x6a,
	0x61, 0x6c, 0x86, 0xcf, 0xb6, 0x78, 0xc2, 0x6d, 0xd3, 0x9b, 0xa0, 0xa7, 0x96, 0x49, 0x78, 0x71,
	0x63, 0x87, 0xa7, 0x68, 0x7d, 0x07, 0x93, 0x7d, 0xa4, 0x30, 0xfc, 0xab, 0xf0, 0x59, 0xe1, 0x51,
	0x69, 0xe7, 0x6c, 0xbb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xdd, 0x84, 0x3f, 0xfe, 0x00,
	0x00, 0x00,
}
