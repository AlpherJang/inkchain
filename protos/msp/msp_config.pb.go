// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msp/msp_config.proto

package msp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MSPConfig collects all the configuration information for
// an MSP. The Config field should be unmarshalled in a way
// that depends on the Type
type MSPConfig struct {
	// Type holds the type of the MSP; the default one would
	// be of type inkchain implementing an X.509 based provider
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Config is MSP dependent configuration info
	Config []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *MSPConfig) Reset()                    { *m = MSPConfig{} }
func (m *MSPConfig) String() string            { return proto.CompactTextString(m) }
func (*MSPConfig) ProtoMessage()               {}
func (*MSPConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MSPConfig) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MSPConfig) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

// InkchainMSPConfig collects all the configuration information for
// a inkchain MSP.
// Here we assume a default certificate validation policy, where
// any certificate signed by any of the listed rootCA certs would
// be considered as valid under this MSP.
// This MSP may or may not come with a signing identity. If it does,
// it can also issue signing identities. If it does not, it can only
// be used to validate and verify certificates.
type InkchainMSPConfig struct {
	// Name holds the identifier of the MSP; MSP identifier
	// is chosen by the application that governs this MSP.
	// For example, and assuming the default implementation of MSP,
	// that is X.509-based and considers a single Issuer,
	// this can refer to the Subject OU field or the Issuer OU field.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// List of root certificates trusted by this MSP
	// they are used upon certificate validation (see
	// comment for IntermediateCerts below)
	RootCerts [][]byte `protobuf:"bytes,2,rep,name=root_certs,json=rootCerts,proto3" json:"root_certs,omitempty"`
	// List of intermediate certificates trusted by this MSP;
	// they are used upon certificate validation as follows:
	// validation attempts to build a path from the certificate
	// to be validated (which is at one end of the path) and
	// one of the certs in the RootCerts field (which is at
	// the other end of the path). If the path is longer than
	// 2, certificates in the middle are searched within the
	// IntermediateCerts pool
	IntermediateCerts [][]byte `protobuf:"bytes,3,rep,name=intermediate_certs,json=intermediateCerts,proto3" json:"intermediate_certs,omitempty"`
	// Identity denoting the administrator of this MSP
	Admins [][]byte `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	// Identity revocation list
	RevocationList [][]byte `protobuf:"bytes,5,rep,name=revocation_list,json=revocationList,proto3" json:"revocation_list,omitempty"`
	// SigningIdentity holds information on the signing identity
	// this peer is to use, and which is to be imported by the
	// MSP defined before
	SigningIdentity *SigningIdentityInfo `protobuf:"bytes,6,opt,name=signing_identity,json=signingIdentity" json:"signing_identity,omitempty"`
	// OrganizationalUnitIdentifiers holds one or more
	// inkchain organizational unit identifiers that belong to
	// this MSP configuration
	OrganizationalUnitIdentifiers []*InkchainOUIdentifier `protobuf:"bytes,7,rep,name=organizational_unit_identifiers,json=organizationalUnitIdentifiers" json:"organizational_unit_identifiers,omitempty"`
	// inkchainCryptoConfig contains the configuration parameters
	// for the cryptographic algorithms used by this MSP
	CryptoConfig *InkchainCryptoConfig `protobuf:"bytes,8,opt,name=crypto_config,json=cryptoConfig" json:"crypto_config,omitempty"`
	// List of TLS root certificates trusted by this MSP.
	// They are returned by GetTLSRootCerts.
	TlsRootCerts [][]byte `protobuf:"bytes,9,rep,name=tls_root_certs,json=tlsRootCerts,proto3" json:"tls_root_certs,omitempty"`
	// List of TLS intermediate certificates trusted by this MSP;
	// They are returned by GetTLSIntermediateCerts.
	TlsIntermediateCerts [][]byte `protobuf:"bytes,10,rep,name=tls_intermediate_certs,json=tlsIntermediateCerts,proto3" json:"tls_intermediate_certs,omitempty"`
}

func (m *InkchainMSPConfig) Reset()                    { *m = InkchainMSPConfig{} }
func (m *InkchainMSPConfig) String() string            { return proto.CompactTextString(m) }
func (*InkchainMSPConfig) ProtoMessage()               {}
func (*InkchainMSPConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *InkchainMSPConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InkchainMSPConfig) GetRootCerts() [][]byte {
	if m != nil {
		return m.RootCerts
	}
	return nil
}

func (m *InkchainMSPConfig) GetIntermediateCerts() [][]byte {
	if m != nil {
		return m.IntermediateCerts
	}
	return nil
}

func (m *InkchainMSPConfig) GetAdmins() [][]byte {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *InkchainMSPConfig) GetRevocationList() [][]byte {
	if m != nil {
		return m.RevocationList
	}
	return nil
}

func (m *InkchainMSPConfig) GetSigningIdentity() *SigningIdentityInfo {
	if m != nil {
		return m.SigningIdentity
	}
	return nil
}

func (m *InkchainMSPConfig) GetOrganizationalUnitIdentifiers() []*InkchainOUIdentifier {
	if m != nil {
		return m.OrganizationalUnitIdentifiers
	}
	return nil
}

func (m *InkchainMSPConfig) GetCryptoConfig() *InkchainCryptoConfig {
	if m != nil {
		return m.CryptoConfig
	}
	return nil
}

func (m *InkchainMSPConfig) GetTlsRootCerts() [][]byte {
	if m != nil {
		return m.TlsRootCerts
	}
	return nil
}

func (m *InkchainMSPConfig) GetTlsIntermediateCerts() [][]byte {
	if m != nil {
		return m.TlsIntermediateCerts
	}
	return nil
}

// inkchainCryptoConfig contains configuration parameters
// for the cryptographic algorithms used by the MSP
// this configuration refers to
type InkchainCryptoConfig struct {
	// SignatureHashFamily is a string representing the hash family to be used
	// during sign and verify operations.
	// Allowed values are "SHA2" and "SHA3".
	SignatureHashFamily string `protobuf:"bytes,1,opt,name=signature_hash_family,json=signatureHashFamily" json:"signature_hash_family,omitempty"`
	// IdentityIdentifierHashFunction is a string representing the hash function
	// to be used during the computation of the identity identifier of an MSP identity.
	// Allowed values are "SHA256", "SHA384" and "SHA3_256", "SHA3_384".
	IdentityIdentifierHashFunction string `protobuf:"bytes,2,opt,name=identity_identifier_hash_function,json=identityIdentifierHashFunction" json:"identity_identifier_hash_function,omitempty"`
}

func (m *InkchainCryptoConfig) Reset()                    { *m = InkchainCryptoConfig{} }
func (m *InkchainCryptoConfig) String() string            { return proto.CompactTextString(m) }
func (*InkchainCryptoConfig) ProtoMessage()               {}
func (*InkchainCryptoConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *InkchainCryptoConfig) GetSignatureHashFamily() string {
	if m != nil {
		return m.SignatureHashFamily
	}
	return ""
}

func (m *InkchainCryptoConfig) GetIdentityIdentifierHashFunction() string {
	if m != nil {
		return m.IdentityIdentifierHashFunction
	}
	return ""
}

// SigningIdentityInfo represents the configuration information
// related to the signing identity the peer is to use for generating
// endorsements
type SigningIdentityInfo struct {
	// PublicSigner carries the public information of the signing
	// identity. For an X.509 provider this would be represented by
	// an X.509 certificate
	PublicSigner []byte `protobuf:"bytes,1,opt,name=public_signer,json=publicSigner,proto3" json:"public_signer,omitempty"`
	// PrivateSigner denotes a reference to the private key of the
	// peer's signing identity
	PrivateSigner *KeyInfo `protobuf:"bytes,2,opt,name=private_signer,json=privateSigner" json:"private_signer,omitempty"`
}

func (m *SigningIdentityInfo) Reset()                    { *m = SigningIdentityInfo{} }
func (m *SigningIdentityInfo) String() string            { return proto.CompactTextString(m) }
func (*SigningIdentityInfo) ProtoMessage()               {}
func (*SigningIdentityInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SigningIdentityInfo) GetPublicSigner() []byte {
	if m != nil {
		return m.PublicSigner
	}
	return nil
}

func (m *SigningIdentityInfo) GetPrivateSigner() *KeyInfo {
	if m != nil {
		return m.PrivateSigner
	}
	return nil
}

// KeyInfo represents a (secret) key that is either already stored
// in the bccsp/keystore or key material to be imported to the
// bccsp key-store. In later versions it may contain also a
// keystore identifier
type KeyInfo struct {
	// Identifier of the key inside the default keystore; this for
	// the case of Software BCCSP as well as the HSM BCCSP would be
	// the SKI of the key
	KeyIdentifier string `protobuf:"bytes,1,opt,name=key_identifier,json=keyIdentifier" json:"key_identifier,omitempty"`
	// KeyMaterial (optional) for the key to be imported; this is
	// properly encoded key bytes, prefixed by the type of the key
	KeyMaterial []byte `protobuf:"bytes,2,opt,name=key_material,json=keyMaterial,proto3" json:"key_material,omitempty"`
}

func (m *KeyInfo) Reset()                    { *m = KeyInfo{} }
func (m *KeyInfo) String() string            { return proto.CompactTextString(m) }
func (*KeyInfo) ProtoMessage()               {}
func (*KeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *KeyInfo) GetKeyIdentifier() string {
	if m != nil {
		return m.KeyIdentifier
	}
	return ""
}

func (m *KeyInfo) GetKeyMaterial() []byte {
	if m != nil {
		return m.KeyMaterial
	}
	return nil
}

// inkchainOUIdentifier represents an organizational unit and
// its related chain of trust identifier.
type InkchainOUIdentifier struct {
	// Certificate represents the second certificate in a certification chain.
	// (Notice that the first certificate in a certification chain is supposed
	// to be the certificate of an identity).
	// It must correspond to the certificate of root or intermediate CA
	// recognized by the MSP this message belongs to.
	// Starting from this certificate, a certification chain is computed
	// and boud to the OrganizationUnitIdentifier specified
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// OrganizationUnitIdentifier defines the organizational unit under the
	// MSP identified with MSPIdentifier
	OrganizationalUnitIdentifier string `protobuf:"bytes,2,opt,name=organizational_unit_identifier,json=organizationalUnitIdentifier" json:"organizational_unit_identifier,omitempty"`
}

func (m *InkchainOUIdentifier) Reset()                    { *m = InkchainOUIdentifier{} }
func (m *InkchainOUIdentifier) String() string            { return proto.CompactTextString(m) }
func (*InkchainOUIdentifier) ProtoMessage()               {}
func (*InkchainOUIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *InkchainOUIdentifier) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *InkchainOUIdentifier) GetOrganizationalUnitIdentifier() string {
	if m != nil {
		return m.OrganizationalUnitIdentifier
	}
	return ""
}

func init() {
	proto.RegisterType((*MSPConfig)(nil), "msp.MSPConfig")
	proto.RegisterType((*InkchainMSPConfig)(nil), "msp.inkchainMSPConfig")
	proto.RegisterType((*InkchainCryptoConfig)(nil), "msp.inkchainCryptoConfig")
	proto.RegisterType((*SigningIdentityInfo)(nil), "msp.SigningIdentityInfo")
	proto.RegisterType((*KeyInfo)(nil), "msp.KeyInfo")
	proto.RegisterType((*InkchainOUIdentifier)(nil), "msp.inkchainOUIdentifier")
}

func init() { proto.RegisterFile("msp/msp_config.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0x55, 0xd7, 0xad, 0xfb, 0x7a, 0x9b, 0x76, 0x9b, 0xb7, 0x6f, 0x0a, 0x12, 0x1b, 0x59, 0x01,
	0xd1, 0x17, 0x5a, 0xb4, 0x21, 0xf1, 0xc6, 0xc3, 0x8a, 0x10, 0x15, 0x4c, 0x4c, 0xa9, 0xf6, 0xc2,
	0x4b, 0xe4, 0xa6, 0x4e, 0x7a, 0x95, 0xc4, 0x8e, 0x6c, 0x67, 0x52, 0x79, 0xe0, 0x5f, 0xf0, 0x67,
	0x79, 0x42, 0x71, 0xdc, 0x36, 0x45, 0xd5, 0xde, 0xec, 0x73, 0x8f, 0x4f, 0xae, 0xcf, 0x3d, 0x31,
	0x9c, 0x65, 0x2a, 0x1f, 0x65, 0x2a, 0x0f, 0x42, 0xc1, 0x23, 0x8c, 0x87, 0xb9, 0x14, 0x5a, 0x90,
	0x66, 0xa6, 0xf2, 0xfe, 0x07, 0x68, 0xdf, 0x4d, 0xef, 0xc7, 0x06, 0x27, 0x04, 0xf6, 0xf5, 0x32,
	0x67, 0x6e, 0xc3, 0x6b, 0x0c, 0x0e, 0x7c, 0xb3, 0x26, 0xe7, 0xd0, 0xaa, 0x4e, 0xb9, 0x7b, 0x5e,
	0x63, 0xe0, 0xf8, 0x76, 0xd7, 0xff, 0xd3, 0x84, 0x13, 0xe4, 0x49, 0xb8, 0xa0, 0xc8, 0xb7, 0x14,
	0x38, 0xcd, 0x2a, 0x85, 0xb6, 0x6f, 0xd6, 0xe4, 0x02, 0x40, 0x0a, 0xa1, 0x83, 0x90, 0x49, 0xad,
	0xdc, 0x3d, 0xaf, 0x39, 0x70, 0xfc, 0x76, 0x89, 0x8c, 0x4b, 0x80, 0xbc, 0x05, 0x82, 0x5c, 0x33,
	0x99, 0xb1, 0x39, 0x52, 0xcd, 0x2c, 0xad, 0x69, 0x68, 0x27, 0xf5, 0x4a, 0x45, 0x3f, 0x87, 0x16,
	0x9d, 0x67, 0xc8, 0x95, 0xbb, 0x6f, 0x28, 0x76, 0x47, 0xde, 0xc0, 0x91, 0x64, 0x8f, 0x22, 0xa4,
	0x1a, 0x05, 0x0f, 0x52, 0x54, 0xda, 0x3d, 0x30, 0x84, 0xde, 0x06, 0xfe, 0x86, 0x4a, 0x93, 0x31,
	0x1c, 0x2b, 0x8c, 0x39, 0xf2, 0x38, 0xc0, 0x39, 0xe3, 0x1a, 0xf5, 0xd2, 0x6d, 0x79, 0x8d, 0x41,
	0xe7, 0xda, 0x1d, 0x66, 0x2a, 0x1f, 0x4e, 0xab, 0xe2, 0xc4, 0xd6, 0x26, 0x3c, 0x12, 0xfe, 0x91,
	0xda, 0x06, 0x09, 0x85, 0x17, 0x42, 0xc6, 0x94, 0xe3, 0x4f, 0x23, 0x4c, 0xd3, 0xa0, 0xe0, 0xa8,
	0xad, 0x60, 0x84, 0x4c, 0x2a, 0xf7, 0xd0, 0x6b, 0x0e, 0x3a, 0xd7, 0xcf, 0x8c, 0xe6, 0xca, 0xa8,
	0xef, 0x0f, 0x93, 0x35, 0xc3, 0xbf, 0xd8, 0x56, 0x78, 0xe0, 0xa8, 0x37, 0x55, 0x45, 0x3e, 0x42,
	0x37, 0x94, 0xcb, 0x5c, 0x0b, 0x3b, 0x35, 0xf7, 0x3f, 0xd3, 0xe4, 0xb6, 0xe0, 0xd8, 0x30, 0x2a,
	0xf3, 0x7d, 0x27, 0xac, 0xed, 0xc8, 0x2b, 0xe8, 0xe9, 0x54, 0x05, 0x35, 0xeb, 0xdb, 0xc6, 0x0f,
	0x47, 0xa7, 0xca, 0x5f, 0xbb, 0xff, 0x1e, 0xce, 0x4b, 0xd6, 0x8e, 0x09, 0x80, 0x61, 0x9f, 0xe9,
	0x54, 0x4d, 0xfe, 0x1d, 0x42, 0xff, 0x77, 0x03, 0xce, 0x76, 0xb5, 0x40, 0xae, 0xe1, 0xff, 0xd2,
	0x2a, 0xaa, 0x0b, 0xc9, 0x82, 0x05, 0x55, 0x8b, 0x20, 0xa2, 0x19, 0xa6, 0x4b, 0x1b, 0x88, 0xd3,
	0x75, 0xf1, 0x0b, 0x55, 0x8b, 0xcf, 0xa6, 0x44, 0x26, 0x70, 0xb5, 0x1a, 0x44, 0xcd, 0x40, 0x7b,
	0xba, 0xe0, 0x61, 0x69, 0x8f, 0x09, 0x5f, 0xdb, 0xbf, 0x5c, 0x11, 0x37, 0x46, 0x19, 0x21, 0xcb,
	0xea, 0x0b, 0x38, 0xdd, 0x31, 0x3e, 0xf2, 0x12, 0xba, 0x79, 0x31, 0x4b, 0x31, 0x0c, 0xca, 0xef,
	0x33, 0x69, 0xba, 0x71, 0x7c, 0xa7, 0x02, 0xa7, 0x06, 0x23, 0x37, 0xd0, 0xcb, 0x25, 0x3e, 0x96,
	0x06, 0x58, 0xd6, 0x9e, 0x31, 0xdc, 0x31, 0x86, 0x7f, 0x65, 0x55, 0x12, 0xba, 0x96, 0x53, 0x1d,
	0xea, 0x4f, 0xe1, 0xd0, 0x56, 0xc8, 0x6b, 0xe8, 0x25, 0xac, 0x7e, 0x03, 0x7b, 0xe7, 0x6e, 0xc2,
	0x6a, 0xed, 0x92, 0x2b, 0x70, 0x4a, 0x5a, 0x46, 0x35, 0x93, 0x48, 0x53, 0xfb, 0x57, 0x75, 0x12,
	0xb6, 0xbc, 0xb3, 0x50, 0xff, 0xd7, 0xc6, 0xdc, 0x7a, 0x60, 0x88, 0x07, 0x9d, 0x72, 0x34, 0x18,
	0x61, 0x48, 0x35, 0xb3, 0x97, 0xa8, 0x43, 0xe4, 0x13, 0x5c, 0x3e, 0x1d, 0x4b, 0xeb, 0xe3, 0xf3,
	0xa7, 0xa2, 0x77, 0x1b, 0x81, 0x27, 0x64, 0xbc, 0xce, 0xd8, 0x66, 0x61, 0xde, 0x0d, 0x55, 0xfa,
	0x71, 0x7b, 0x7c, 0xa7, 0xf2, 0x6a, 0xe6, 0xf7, 0x34, 0x4c, 0x68, 0xcc, 0x7e, 0xbc, 0x8b, 0x51,
	0x2f, 0x8a, 0xd9, 0x30, 0x14, 0xd9, 0x08, 0x79, 0x92, 0xd2, 0x99, 0x8a, 0x44, 0xc1, 0xe7, 0xe6,
	0x1b, 0xa3, 0x95, 0xc6, 0xa8, 0xd2, 0x28, 0x5f, 0xa3, 0x59, 0xcb, 0xac, 0x6f, 0xfe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xbd, 0x03, 0x23, 0x9a, 0x9f, 0x04, 0x00, 0x00,
}
